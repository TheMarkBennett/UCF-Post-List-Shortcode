<?php
/**
 * Place common functions here.
 **/

if ( !class_exists( 'UCF_Post_List_Common' ) ) {

	class UCF_Post_List_Common {
		public static function display_post_list( $items, $layout, $title ) {
			ob_start();

			if ( has_action( 'ucf_post_list_display_' . $layout . '_before' ) ) {
				do_action( 'ucf_post_list_display_' . $layout . '_before', $items, $title );
			}

			if ( has_action( 'ucf_post_list_display_' . $layout . '_title'  ) ) {
				do_action( 'ucf_post_list_display_' . $layout . '_title', $items, $title );
			}

			if ( has_action( 'ucf_post_list_display_' . $layout  ) ) {
				do_action( 'ucf_post_list_display_' . $layout, $items, $title );
			}

			if ( has_action( 'ucf_post_list_display_' . $layout . '_after' ) ) {
				do_action( 'ucf_post_list_display_' . $layout . '_after', $items, $title );
			}

			return ob_get_clean();
		}

		public static function get_post_list( $args ) {
			return get_posts( self::prepare_post_list_args( $args ) );
		}

		/**
		 * Additional massaging of arguments before passing them to
		 * get_posts().
		 **/
		public static function prepare_post_list_args( $args ) {
			// We intentionally remove empty values before passing them to
		 	// get_posts() to allow WP to set its own defaults as necessary (so
		 	// that we don't have to add/maintain them in this plugin.)
			$filtered_args = array_filter( $args, array( 'UCF_Post_List_Common', 'filter_post_list_arg' ) );

			// If Advanced Custom Fields is enabled, provide support for
			// relationship fields.
			if ( class_exists( 'ACF' ) ) {
				$filtered_args = self::filter_acf_relationship_field_meta( $filtered_args );
			}

			return $filtered_args;
		}

		/**
		 * Removes empty arguments while preserving 0 value integers.
		 **/
		private static function filter_post_list_arg( $arg ) {
			return !(
				is_array( $arg ) && empty( $arg )
				|| is_null( $arg )
				|| is_string( $arg ) && empty( $arg )
			);
		}

		/**
		 * Provides support for meta queries against serialized meta data for
		 * Advanced Custom Fields relationship fields
		 *
		 * NOTE: this function will need to be updated if meta_query support
		 * is added to the shortcode
		 **/
		private static function filter_acf_relationship_field_meta( $args ) {
			if ( isset( $args['meta_value'] ) && isset( $args['meta_key'] ) ) {
				$field_obj = _acf_get_field_by_name( $args['meta_key'], false );

				// Is this a field generated by ACF?
				if ( $field_obj && isset( $field_obj['type'] ) ) {

					// Is $field_obj a relationship field?
					if ( $field_obj['type'] == 'relationship' ) {
						// Get all valid post types to query against
						$post_types = isset( $field_obj['post_type'] ) ? $field_obj['post_type'] : 'any';

						// Normalize meta_value into an array of unique post IDs
						$meta_value  = explode( ',', $args['meta_value'] );
						$meta_value_ids   = array_filter( $meta_value, 'is_numeric' ); // get all values that look like post IDs
						$meta_value_slugs = array_diff( $meta_value, $meta_value_ids ); // assume anything else is intended to be a post slug

						if ( !empty( $meta_value_slugs ) ) {
							$posts_by_slug = get_posts( array(
								'post_name__in' => $meta_value_slugs,
								'post_type' => $post_types,
								'fields' => 'ids',
								'numberposts' => -1
							) );
							$meta_value_ids = array_merge( $meta_value_ids, $posts_by_slug );
						}
						$meta_value_ids = array_unique( $meta_value_ids );

						// Pre-fetch posts using string comparisons against
						// serialized metadata for each post ID in meta_value
						$reverse_posts = array();
						if ( $meta_value_ids ) {
							$reverse_post_types = isset( $args['post_type'] ) ? $args['post_type'] : 'any';
							$reverse_query_args = array(
								'post_type'   => $reverse_post_types,
								'numberposts' => -1,
								'meta_query' => array(),
								'fields' => 'ids'
							);
							// Check for our custom 'meta_serialized_relation'
							// arg, which specifies the relation param between
							// meta queries (WP defaults this to "AND"):
							if ( isset( $args['meta_serialized_relation'] ) ) {
								$reverse_query_args['meta_query']['relation'] = $args['meta_serialized_relation'];
							}
							foreach ( $meta_value_ids as $id ) {
								// https://www.advancedcustomfields.com/resources/querying-relationship-fields/
								$reverse_query_args['meta_query'][] = array(
									'key'     => $args['meta_key'], // name of custom field
									'value'   => '"' . $id . '"', // matches exactly "123", not just 123. This prevents a match for "1234"
									'compare' => 'LIKE'
								);
							}
							$reverse_posts = get_posts( $reverse_query_args );
						}

						// Finally, strip out meta_key and meta_value args in favor of
						// using our pre-fetched list of post IDs:
						unset( $args['meta_key'], $args['meta_value'], $args['meta_serialized_relation'] );

						if ( isset( $args['post__in'] ) ) {
							$args['post__in'] = array_intersect( $args['post__in'], $reverse_posts );
						}
						else {
							$args['post__in'] = $reverse_posts;
						}
					}

				}
			}

			return $args;
		}
	}
}

if ( !function_exists( 'ucf_post_list_display_default_before' ) ) {

	function ucf_post_list_display_default_before( $items, $title ) {
		ob_start();
	?>
	<div class="ucf-post-list ucf-post-list-default">
	<?php
		echo ob_get_clean();
	}

	add_action( 'ucf_post_list_display_default_before', 'ucf_post_list_display_default_before', 10, 2 );

}

if ( !function_exists( 'ucf_post_list_display_default_title' ) ) {

	function ucf_post_list_display_default_title( $items, $title ) {
		$formatted_title = '';

		if ( $title ) {
			$formatted_title = '<h2 class="ucf-post-list-title">' . $title . '</h2>';
		}

		echo $formatted_title;
	}

	add_action( 'ucf_post_list_display_default_title', 'ucf_post_list_display_default_title', 10, 2 );

}

if ( !function_exists( 'ucf_post_list_display_default' ) ) {

	function ucf_post_list_display_default( $items, $title ) {
		if ( ! is_array( $items ) ) { $items = array( $items ); }
		ob_start();
	?>
		<?php if ( $items ): ?>
		<ul class="ucf-post-list-items">
			<?php foreach ( $items as $item ): ?>
			<li class="ucf-post-list-item">
				<a href="<?php echo get_permalink( $item->ID ); ?>"><?php echo $item->post_title; ?></a>
			</li>
			<?php endforeach; ?>
		</ul>
		<?php else: ?>
		<div class="ucf-post-list-error">No results found.</div>
		<?php endif; ?>
	<?php
		echo ob_get_clean();
	}

	add_action( 'ucf_post_list_display_default', 'ucf_post_list_display_default', 10, 2 );

}

if ( !function_exists( 'ucf_post_list_display_default_after' ) ) {

	function ucf_post_list_display_default_after( $items, $title ) {
		ob_start();
	?>
	</div>
	<?php
		echo ob_get_clean();
	}

	add_action( 'ucf_post_list_display_default_after', 'ucf_post_list_display_default_after', 10, 2 );

}

if ( ! function_exists( 'ucf_post_list_enqueue_assets' ) ) {
	function ucf_post_list_enqueue_assets() {
		// CSS
		$include_css = UCF_Post_List_Config::get_option_or_default( 'include_css' );
		$css_deps = apply_filters( 'ucf_post_list_style_deps', array() );

		if ( $include_css ) {
			wp_enqueue_style( 'ucf_post_list_css', plugins_url( 'static/css/ucf-post-list.min.css', UCF_POST_LIST__PLUGIN_FILE ), $css_deps, false, 'screen' );
		}
	}

	add_action( 'wp_enqueue_scripts', 'ucf_post_list_enqueue_assets' );
}
